# Dashboard 구현 현황

## 개요
AningCall Flutter 앱의 대시보드 화면 구현 현황을 정리한 문서입니다. 현재까지 구현된 기능들과 UI 컴포넌트들을 상세히 문서화합니다.

## 구현된 주요 기능

### 1. 대시보드 메인 화면 (DashboardScreen)
- **파일 위치**: `lib/screens/dashboard_screen.dart` (673줄)
- **상태 관리**: Flutter Riverpod 기반
- **애니메이션**: 2개의 AnimationController 사용
  - `_animationController`: 알람 추가/수정 시 500ms 애니메이션
  - `_switchAnimationController`: 스위치 토글 시 300ms 애니메이션

#### 1.1 AppBar 구성
- **제목**: "AningCall"
- **액션**: ThemeToggleButton (테마 변경 버튼)
- **배경색**: Theme.of(context).colorScheme.surface

#### 1.2 Bottom Navigation Bar
- **4개 탭 구성**:
  1. 알람 (Icons.alarm)
  2. 통계 (Icons.analytics)
  3. 통화기록 (Icons.history)
  4. 마이페이지 (Icons.person)
- **타입**: BottomNavigationBarType.fixed

#### 1.3 Floating Action Button
- **표시 조건**: 알람 탭(index 0)에서만 표시
- **기능**: 알람 추가 화면(AlarmAddScreen) 이동
- **콜백**: 알람 저장 시 DashboardProvider에 추가

### 2. 알람 탭 구현

#### 2.1 빈 상태 UI
- **표시 조건**: 알람이 없을 때
- **구성**: 
  - Icons.alarm_off (80px, 회색)
  - "알람 없으면 텅텅…" 메시지

#### 2.2 알람 목록 UI
- **다음 알람 요약 카드**: `_buildNextAlarmSummary()`
- **알람 타입 필터**: `_buildAlarmTypeSlider()`
- **알람 리스트**: `_buildCompactAlarmCard()`

#### 2.3 다음 알람 요약 카드
- **그라데이션 배경**: Primary → Secondary 색상
- **그림자 효과**: Primary 색상 기반 (alpha: 0.3)
- **표시 정보**:
  - 다음 알람까지 남은 시간 (더미: "6시간 20분")
  - 활성 알람 개수
  - 전체 알람 개수
- **사용자 아바타**: 클릭 시 AvatarCustomizeScreen 이동

#### 2.4 알람 타입 필터 슬라이더
- **3개 옵션**: 전체(0), 일반알람(1), 전화알람(2)
- **UI**: 둥근 모서리 컨테이너 (20px 반지름)
- **상태**: DashboardProvider의 alarmTypeFilter로 관리
- **애니메이션**: 필터 변경 시 애니메이션 실행

#### 2.5 컴팩트 알람 카드
- **구성 요소**:
  - 시간 표시 원형 아바타 (반지름: 18px)
  - 알람 시간 (18px 볼드)
  - 알람 타입 배지 (전화/일반)
  - 요일 표시 (5일 이상이면 "평일"로 축약)
  - 태그 표시
  - 활성화/비활성화 스위치 (0.8배 축소)
- **인터랙션**:
  - 카드 클릭: AlarmAddScreen으로 수정 모드 이동
  - 스위치 토글: 알람 활성화/비활성화
- **애니메이션**: 스위치 토글 시 SlideTransition + Scale 효과

### 3. 상태 관리 (DashboardProvider)
- **파일 위치**: `lib/core/providers/dashboard_provider.dart`
- **상태 클래스**: DashboardState

#### 3.1 DashboardState 구조
```dart
class DashboardState {
  final int currentIndex;        // 현재 탭 인덱스
  final List<Alarm> alarms;      // 알람 목록
  final int alarmTypeFilter;     // 알람 타입 필터 (0: 전체, 1: 일반, 2: 전화)
  final int userPoints;          // 사용자 포인트 (기본: 1250)
  final String selectedAvatar;   // 선택된 아바타 ID (기본: 'default')
  final bool isLoading;          // 로딩 상태
  final String? error;           // 에러 메시지
}
```

#### 3.2 DashboardNotifier 주요 메서드
- `setCurrentIndex(int index)`: 탭 변경
- `setAlarmTypeFilter(int filter)`: 알람 필터 변경
- `addAlarm(Alarm alarm)`: 알람 추가
- `updateAlarm(Alarm updatedAlarm)`: 알람 수정
- `toggleAlarm(int alarmId)`: 알람 활성화/비활성화 토글
- `updateUserProfile({int? points, String? avatar})`: 사용자 프로필 업데이트
- `getFilteredAndSortedAlarms()`: 필터링 및 정렬된 알람 목록 반환

#### 3.3 더미 데이터
- **초기 알람 3개 로드**:
  1. 07:00 평일 일반알람 (운동, 85% 성공률)
  2. 08:30 주말 전화알람 (회의, 60% 성공률, 비활성화)
  3. 06:45 월/수/금 일반알람 (독서, 90% 성공률)

### 4. 알람 모델 (Alarm)
- **파일 위치**: `lib/core/models/alarm.dart`
- **JSON 직렬화**: json_annotation 사용

#### 4.1 Alarm 클래스 구조
```dart
class Alarm {
  final int id;                  // 고유 ID
  final String time;             // 알람 시간 (HH:mm 형식)
  final List<String> days;       // 반복 요일 배열
  final AlarmType type;          // 알람 타입 (normal/call)
  final bool isEnabled;          // 활성화 상태
  final String tag;              // 알람 태그
  final int successRate;         // 성공률 (%)
}
```

#### 4.2 AlarmType 열거형
```dart
enum AlarmType {
  @JsonValue('NORMAL')
  normal,    // 일반알람
  @JsonValue('CALL')
  call,      // 전화알람
}
```

### 5. 테마 시스템
- **파일 위치**: 
  - `lib/core/providers/theme_provider.dart`
  - `lib/core/theme/app_theme.dart`
  - `lib/core/widgets/buttons/theme_toggle_button.dart`

#### 5.1 테마 관리 (ThemeProvider)
- **상태 관리**: StateNotifier&lt;ThemeMode&gt;
- **저장소**: SharedPreferences 사용
- **지원 모드**: 시스템 설정, 라이트 모드, 다크 모드
- **토글 순서**: 시스템 → 라이트 → 다크 → 시스템

#### 5.2 테마 버튼 (ThemeToggleButton)
- **위치**: AppBar 우상단
- **표시**: 현재 테마 모드에 따른 아이콘
- **기능**: 탭 시 다음 테마로 순환 변경

#### 5.3 다크 테마 특징
- **Primary**: Enhanced Red 색상 체계
- **배경**: 완전한 검은색 (#000000)
- **Surface**: 다크 그레이 계열
- **강조 색상**: Red, Green, Amber, Blue 조합

### 6. 아바타 시스템
- **파일 위치**: `lib/screens/avatar_customize_screen.dart`
- **아바타 종류**: 8가지 (default, cat, robot, star, heart, diamond, crown, rainbow)
- **색상 매핑**: 각 아바타별 고유 색상 지정
- **포인트 연동**: 사용자 포인트와 연결된 커스터마이징

### 7. 기타 화면들

#### 7.1 통계 화면 (StatsScreen)
- **파일 위치**: `lib/screens/stats_screen.dart`
- **TabController**: 탭 기반 UI 구조
- **필터링**: 기간별, 타입별 필터 지원
- **더미 데이터**: 30일 성과 중심의 통계 정보

#### 7.2 프로필 화면 (ProfileScreen)
- **사용자 정보 관리**
- **설정 옵션**

#### 7.3 통화기록 화면 (CallHistoryScreen)
- **알람 통화 이력 관리**

## 구현 특징

### 1. 애니메이션 시스템
- **부드러운 전환**: Curves.easeInOut 사용
- **다층 애니메이션**: 여러 애니메이션 컨트롤러 동시 사용
- **사용자 피드백**: 스위치 토글, 알람 추가 시 시각적 피드백

### 2. 반응형 UI
- **컴팩트한 디자인**: 모바일 최적화된 카드 레이아웃
- **적응형 텍스트**: 긴 텍스트 자동 축약 (ellipsis)
- **터치 친화적**: 충분한 터치 영역 확보

### 3. 상태 관리 패턴
- **Riverpod 기반**: 선언적 상태 관리
- **불변성**: copyWith 패턴으로 상태 변경
- **의존성 주입**: Provider를 통한 깔끔한 의존성 관리

### 4. 디자인 시스템
- **일관된 색상**: Material 3 기반 색상 체계
- **타이포그래피**: 계층적 텍스트 스타일
- **그라데이션**: Primary-Secondary 그라데이션 활용

## 개발 환경
- **Flutter**: 3.9.2+
- **Dart**: 최신 안정 버전
- **상태관리**: flutter_riverpod 2.6.1
- **로컬 저장소**: shared_preferences
- **JSON**: json_annotation + build_runner

## 다음 단계 계획
1. **알람 추가/수정 화면** 완성
2. **실제 알람 스케줄링** 구현
3. **퍼즐 시스템** 연동
4. **백엔드 API** 연동
5. **푸시 알림** 구현

## 파일 구조 요약
```
lib/
├── main.dart                           # 앱 진입점, 테마 설정
├── screens/
│   ├── dashboard_screen.dart           # 메인 대시보드 (673줄)
│   ├── stats_screen.dart               # 통계 화면
│   ├── profile_screen.dart             # 프로필 화면
│   ├── call_history_screen.dart        # 통화기록 화면
│   └── avatar_customize_screen.dart    # 아바타 커스터마이징
├── core/
│   ├── providers/
│   │   ├── dashboard_provider.dart     # 대시보드 상태 관리
│   │   └── theme_provider.dart         # 테마 상태 관리
│   ├── models/
│   │   └── alarm.dart                  # 알람 데이터 모델
│   ├── theme/
│   │   └── app_theme.dart              # 앱 테마 정의
│   └── widgets/
│       └── buttons/
│           └── theme_toggle_button.dart # 테마 토글 버튼
```