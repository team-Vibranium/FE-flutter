# AningCall Design System 구현 현황

## 개요
AningCall Flutter 앱의 디자인 시스템 구현 현황을 정리한 문서입니다. Material Design 3를 기반으로 한 색상, 타이포그래피, 컴포넌트 시스템의 구체적인 구현 내용을 다룹니다.

## 디자인 시스템 구조

### 1. 파일 구조
```
lib/core/design_system/
├── app_colors.dart          # 색상 시스템
├── app_text_styles.dart     # 타이포그래피
├── app_spacing.dart         # 간격 시스템
├── app_radius.dart          # Border Radius
├── app_elevation.dart       # Elevation
└── app_animations.dart      # 애니메이션 설정

lib/core/theme/
└── app_theme.dart          # 테마 통합 설정

lib/core/widgets/
├── buttons/                # 버튼 컴포넌트
├── cards/                  # 카드 컴포넌트
├── chips/                  # Chip 컴포넌트
└── inputs/                 # 입력 컴포넌트
```

## 색상 시스템 (AppColors)

### 1.1 Primary Color Swatch
- **기본 색상**: Red 계열 (#E53E3E)
- **Material Color System**: 50~900 단계별 색상 정의
- **Semantic Colors**: Primary, Secondary, Tertiary, Warning, Error, Success, Info

```dart
// Primary Colors - Material Color System
static const MaterialColor primarySwatch = MaterialColor(
  0xFFE53E3E, // Red-500
  <int, Color>{
    50: Color(0xFFFEE5E5),   // 가장 연한 색
    100: Color(0xFFFCCCCC),
    200: Color(0xFFF99999),
    300: Color(0xFFF66666),
    400: Color(0xFFF23333),
    500: Color(0xFFE53E3E),  // Primary 색상
    600: Color(0xFFCC3535),
    700: Color(0xFFB22C2C),
    800: Color(0xFF992323),
    900: Color(0xFF801A1A),  // 가장 진한 색
  },
);
```

### 1.2 Semantic Colors
- **Primary**: #E53E3E (Red) - 메인 브랜드 색상
- **Secondary**: #48BB78 (Green) - 성공, 확인 액션
- **Tertiary**: #3182CE (Blue) - 정보, 링크
- **Warning**: #ED8936 (Orange) - 주의, 경고
- **Error**: #E53E3E (Red) - 오류, 실패
- **Success**: #48BB78 (Green) - 성공, 완료
- **Info**: #3182CE (Blue) - 정보 제공

### 1.3 라이트 테마 중성 색상
- **Surface**: #FFFBFE - 배경색
- **onSurface**: #1C1B1F - 메인 텍스트
- **surfaceVariant**: #E7E0EC - 카드 배경
- **onSurfaceVariant**: #49454F - 보조 텍스트
- **outline**: #79747E - 테두리
- **outlineVariant**: #CAC4D0 - 구분선

### 1.4 다크 테마 색상 (Enhanced)
- **Background**: #000000 - 완전한 검은색 배경
- **Surface**: #1F2937 - 카드, 패널 배경
- **surfaceVariant**: #374151 - 입력 필드, 비활성 버튼
- **onSurface**: #FFFFFF - 메인 텍스트
- **onSurfaceVariant**: #9CA3AF - 보조 텍스트
- **outline**: #374151 - 테두리
- **outlineVariant**: #6B7280 - 비활성 텍스트

### 1.5 Enhanced Primary Colors
- **enhancedPrimary**: #EF4444 - Primary Red
- **enhancedPrimaryHover**: #DC2626 - Hover 상태
- **enhancedPrimaryActive**: #B91C1C - Active 상태
- **enhancedSuccess**: #10B981 - Success Green
- **enhancedSuccessHover**: #059669 - Success Hover
- **enhancedWarning**: #F59E0B - Warning Amber
- **enhancedInfo**: #3B82F6 - Info Blue

## 타이포그래피 시스템 (AppTextStyles)

### 2.1 Display Styles (대형 제목)
- **displayLarge**: 57px, Regular (400), -0.25 letter-spacing
- **displayMedium**: 45px, Regular (400), 0 letter-spacing
- **displaySmall**: 36px, Regular (400), 0 letter-spacing

### 2.2 Headline Styles (제목)
- **headlineLarge**: 32px, Medium (500), 0 letter-spacing
- **headlineMedium**: 28px, Medium (500), 0 letter-spacing
- **headlineSmall**: 24px, Medium (500), 0 letter-spacing

### 2.3 Body Styles (본문)
- **bodyLarge**: 16px, Regular (400), 0.5 letter-spacing, 1.5 line-height
- **bodyMedium**: 14px, Regular (400), 0.25 letter-spacing, 1.43 line-height
- **bodySmall**: 12px, Regular (400), 0.4 letter-spacing, 1.33 line-height

### 2.4 Label Styles (라벨)
- **labelLarge**: 14px, Medium (500), 0.1 letter-spacing
- **labelMedium**: 12px, Medium (500), 0.5 letter-spacing
- **labelSmall**: 11px, Medium (500), 0.5 letter-spacing

## 간격 시스템 (AppSpacing)

### 3.1 간격 정의
```dart
class AppSpacing {
  static const double xs = 4.0;     // 4dp - 최소 간격
  static const double sm = 8.0;     // 8dp - 작은 간격
  static const double md = 16.0;    // 16dp - 기본 간격
  static const double lg = 24.0;    // 24dp - 큰 간격
  static const double xl = 32.0;    // 32dp - 매우 큰 간격
  static const double xxl = 48.0;   // 48dp - 섹션 간격
  static const double xxxl = 64.0;  // 64dp - 페이지 간격
}
```

### 3.2 사용 가이드라인
- **xs (4dp)**: 아이콘과 텍스트 사이, 작은 요소들 사이
- **sm (8dp)**: 관련 요소들 사이, 카드 내부 요소들
- **md (16dp)**: 기본 패딩, 마진, 카드 간격
- **lg (24dp)**: 섹션 구분, 큰 요소들 사이
- **xl (32dp)**: 페이지 상하 여백, 주요 섹션 간격
- **xxl (48dp)**: 큰 섹션 구분, 헤더 여백
- **xxxl (64dp)**: 페이지 전체 여백, 스크린 간격

## Border Radius 시스템 (AppRadius)

### 4.1 Radius 정의
```dart
class AppRadius {
  static const BorderRadius xs = BorderRadius.all(Radius.circular(4.0));    // 작은 요소
  static const BorderRadius sm = BorderRadius.all(Radius.circular(8.0));    // Chip, Tag
  static const BorderRadius md = BorderRadius.all(Radius.circular(12.0));   // 카드, 버튼
  static const BorderRadius lg = BorderRadius.all(Radius.circular(16.0));   // 큰 카드
  static const BorderRadius xl = BorderRadius.all(Radius.circular(20.0));   // 특별한 요소
  static const BorderRadius full = BorderRadius.all(Radius.circular(999.0)); // 완전 둥근 형태
}
```

### 4.2 적용 가이드라인
- **xs (4dp)**: 작은 배지, 인디케이터
- **sm (8dp)**: Status Chip, 작은 버튼
- **md (12dp)**: 기본 카드, Primary/Secondary 버튼, 입력 필드
- **lg (16dp)**: 큰 카드, 다이얼로그
- **xl (20dp)**: 특수 카드, 강조 요소
- **full**: 원형 아바타, 원형 버튼

## Elevation 시스템 (AppElevation)

### 5.1 Elevation 레벨
```dart
class AppElevation {
  static const double level0 = 0.0;   // Surface - 기본 배경
  static const double level1 = 1.0;   // Cards at rest - 기본 카드
  static const double level2 = 3.0;   // Cards on hover - 호버 상태 카드
  static const double level3 = 6.0;   // Dialogs, Navigation drawer - 다이얼로그
  static const double level4 = 8.0;   // Navigation bar - 네비게이션 바
  static const double level5 = 12.0;  // FAB, Snackbar - 플로팅 요소
}
```

### 5.2 적용 원칙
- **Level 0**: 배경과 동일한 레벨
- **Level 1**: 기본 카드, 일반 상태
- **Level 2**: 인터랙션 상태 (호버, 포커스)
- **Level 3**: 모달, 다이얼로그, 드로어
- **Level 4**: 고정 네비게이션 요소
- **Level 5**: 플로팅 액션 버튼, 스낵바

## 애니메이션 시스템 (AppAnimations)

### 6.1 Duration 표준
```dart
class AppDurations {
  static const Duration fast = Duration(milliseconds: 150);    // 빠른 전환
  static const Duration medium = Duration(milliseconds: 300);  // 기본 전환
  static const Duration slow = Duration(milliseconds: 500);    // 느린 전환
}
```

### 6.2 Curve 표준
```dart
class AppCurves {
  static const Curve easeIn = Curves.easeIn;           // 가속
  static const Curve easeOut = Curves.easeOut;         // 감속
  static const Curve easeInOut = Curves.easeInOut;     // 가속-감속
  static const Curve standard = Curves.easeInOutCubic; // 표준 곡선
}
```

### 6.3 애니메이션 적용 가이드라인
- **fast (150ms)**: 호버, 포커스 상태 변경
- **medium (300ms)**: 페이지 전환, 모달 표시/숨김
- **slow (500ms)**: 복잡한 레이아웃 변경, 데이터 로딩

## 구현된 위젯 컴포넌트

### 7.1 버튼 컴포넌트

#### 7.1.1 Primary Button
- **파일**: `lib/core/widgets/buttons/primary_button.dart`
- **특징**:
  - 메인 액션용 버튼
  - 로딩 상태 지원 (CircularProgressIndicator)
  - 아이콘 + 텍스트 조합 지원
  - 커스터마이징 가능한 너비, 높이
  - AppRadius.md, AppElevation.level1 적용

```dart
const PrimaryButton(
  text: 'Call',
  icon: Icons.call,
  isLoading: false,
  onPressed: () {},
);
```

#### 7.1.2 Secondary Button
- **파일**: `lib/core/widgets/buttons/secondary_button.dart`
- **특징**:
  - 보조 액션용 아웃라인 버튼
  - Primary Button과 동일한 API
  - outline 스타일 적용

```dart
const SecondaryButton(
  text: 'Cancel',
  icon: Icons.close,
  onPressed: () {},
);
```

#### 7.1.3 Call Button
- **파일**: `lib/core/widgets/buttons/call_button.dart`
- **특징**:
  - 통화 화면용 원형 버튼
  - 커스터마이징 가능한 배경색, 아이콘 색상
  - 그림자 효과 적용
  - InkWell 리플 효과

```dart
const CallButton(
  icon: Icons.call,
  backgroundColor: Colors.green,
  iconColor: Colors.white,
  size: 72.0,
  onPressed: () {},
);
```

#### 7.1.4 Theme Toggle Button
- **파일**: `lib/core/widgets/buttons/theme_toggle_button.dart`
- **특징**:
  - Riverpod 기반 테마 상태 관리
  - 시스템 → 라이트 → 다크 순환
  - 라벨 표시 옵션
  - 현재 테마에 따른 아이콘 변경

### 7.2 카드 컴포넌트

#### 7.2.1 App Card
- **파일**: `lib/core/widgets/cards/app_card.dart`
- **특징**:
  - 기본 카드 컴포넌트
  - 커스터마이징 가능한 색상, elevation, borderRadius
  - InkWell 터치 효과
  - 기본 패딩 AppSpacing.md

```dart
AppCard(
  onTap: () {},
  child: Text('Card Content'),
  padding: EdgeInsets.all(16),
);
```

### 7.3 Chip 컴포넌트

#### 7.3.1 Status Chip
- **파일**: `lib/core/widgets/chips/status_chip.dart`
- **특징**:
  - 상태 표시용 Chip
  - 아이콘 + 텍스트 조합
  - 흰색 배경 옵션 (useWhiteBackground)
  - 터치 이벤트 지원

```dart
StatusChip(
  label: '전화알람',
  color: Colors.blue,
  icon: Icons.call,
  onTap: () {},
);
```

### 7.4 입력 컴포넌트

#### 7.4.1 App Text Field
- **파일**: `lib/core/widgets/inputs/app_text_field.dart`
- **특징**:
  - 텍스트 입력 필드
  - 다양한 상태별 테두리 색상 (enabled, focused, error, disabled)
  - prefix/suffix 아이콘 지원
  - 유효성 검사 지원
  - filled 스타일 적용

```dart
AppTextField(
  label: 'Phone Number',
  hint: 'Enter phone number',
  prefixIcon: Icon(Icons.phone),
  keyboardType: TextInputType.phone,
  validator: (value) => value?.isEmpty == true ? 'Required' : null,
);
```

## 테마 통합 (AppTheme)

### 8.1 라이트 테마
- **파일**: `lib/core/theme/app_theme.dart`
- **구성**:
  - Material 3 기반 ColorScheme
  - AppColors의 색상 시스템 적용
  - AppTextStyles의 타이포그래피 적용
  - 컴포넌트별 기본 스타일 정의

### 8.2 다크 테마
- **특징**:
  - Enhanced Dark Colors 적용
  - 완전한 검은색 배경 (#000000)
  - 높은 대비율로 가독성 향상
  - 모든 컴포넌트에서 다크 모드 지원

### 8.3 테마 관리
- **ThemeProvider**: Riverpod 기반 상태 관리
- **SharedPreferences**: 테마 설정 영구 저장
- **자동 적용**: 시스템 설정에 따른 자동 테마 변경

## 접근성 (Accessibility)

### 9.1 색상 대비율
- **일반 텍스트**: 최소 4.5:1 대비율 준수
- **큰 텍스트**: 최소 3:1 대비율 준수
- **UI 요소**: 최소 3:1 대비율 준수

### 9.2 터치 타겟
- **최소 크기**: 48dp × 48dp
- **권장 크기**: 56dp × 56dp (FAB)
- **간격**: 최소 8dp 터치 타겟 간 간격

### 9.3 시맨틱 라벨
- 모든 인터랙티브 요소에 적절한 시맨틱 라벨 제공
- 스크린 리더 지원

## 반응형 디자인

### 10.1 브레이크포인트
```dart
class Breakpoints {
  static const double mobile = 600;     // 모바일
  static const double tablet = 840;     // 태블릿
  static const double desktop = 1200;   // 데스크톱
}
```

### 10.2 그리드 시스템
- **Phone**: 4dp 기본 그리드
- **Keylines**: 16dp 마진 (모바일), 24dp 마진 (태블릿)
- **Content**: 8dp 최소 터치 타겟 간격
- **Cards**: 16dp 패딩, 8dp 카드 간 간격

### 10.3 Safe Area
- 모든 스크린에서 SafeArea 위젯 사용
- 상태 표시줄과 네비게이션 바 고려
- 노치와 둥근 모서리 대응

## 사용 예시

### 11.1 기본 화면 레이아웃
```dart
class ExampleScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AningCall'),
        actions: const [ThemeToggleButton()],
      ),
      body: Padding(
        padding: const EdgeInsets.all(AppSpacing.md),
        child: Column(
          children: [
            AppCard(
              child: Column(
                children: [
                  AppTextField(
                    label: 'Phone Number',
                    hint: 'Enter phone number',
                    prefixIcon: const Icon(Icons.phone),
                  ),
                  const SizedBox(height: AppSpacing.md),
                  PrimaryButton(
                    text: 'Call',
                    icon: Icons.call,
                    onPressed: () {},
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

### 11.2 상태 표시 예시
```dart
Row(
  children: [
    StatusChip(
      label: '전화알람',
      color: Colors.blue,
      icon: Icons.call,
    ),
    const SizedBox(width: AppSpacing.sm),
    StatusChip(
      label: '활성',
      color: Colors.green,
      icon: Icons.check_circle,
    ),
  ],
);
```

## 개발 가이드라인

### 12.1 색상 사용 원칙
1. **Primary**: 메인 액션, 브랜드 강조
2. **Secondary**: 보조 액션, 성공 상태
3. **Error**: 오류, 삭제, 위험한 액션
4. **Warning**: 주의사항, 확인 필요
5. **Info**: 정보 제공, 링크

### 12.2 타이포그래피 사용 원칙
1. **Display**: 랜딩 페이지, 큰 제목
2. **Headline**: 페이지 제목, 섹션 제목
3. **Body**: 일반 텍스트, 설명
4. **Label**: 버튼, 입력 필드 라벨

### 12.3 간격 사용 원칙
1. **일관성**: 동일한 레벨의 요소는 동일한 간격 사용
2. **계층**: 중요도에 따라 간격 차등 적용
3. **그룹핑**: 관련 요소들은 작은 간격, 다른 그룹과는 큰 간격

### 12.4 컴포넌트 사용 원칙
1. **재사용성**: 공통 컴포넌트 최대한 활용
2. **일관성**: 동일한 기능은 동일한 컴포넌트 사용
3. **확장성**: 필요에 따라 props로 커스터마이징

## 향후 계획

### 13.1 추가 예정 컴포넌트
- **Loading Indicators**: 다양한 로딩 상태 표시
- **Progress Bars**: 진행률 표시
- **Dialogs**: 모달, 알럿 다이얼로그
- **Bottom Sheets**: 하단 시트
- **Snackbars**: 알림 메시지

### 13.2 개선 사항
- **애니메이션 라이브러리**: 더 풍부한 애니메이션 효과
- **다크 모드 최적화**: 더 세밀한 다크 모드 색상 조정
- **접근성 개선**: 더 나은 스크린 리더 지원
- **성능 최적화**: 컴포넌트 렌더링 성능 개선

이 디자인 시스템은 AningCall 앱의 일관된 사용자 경험을 제공하며, 개발 효율성과 유지보수성을 높이는 데 기여합니다.